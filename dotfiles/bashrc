# .bashrc asdf

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

if [ "$TERM" != "dumb" ]; then
    dircolors -b 1>/dev/null 2>/dev/null
    if (( $? == 0 )); then
        alias ls='ls --color=auto'
    else
        alias ls='ls -G'
    fi
fi



# set window title to user@host:pwd
echo -ne "\033]0;${USER}@`hostname`:`pwd`\007"

# Example: [23:35:56] [amin.nj@elara] ~/syncfiles/dotfiles > 

#TODO reinstate below line when puttycyg works
PS="\[\033[01;34m\][\t]\[\e[0m\] \[\033[00;34m\][\u@\h]\[\e[0m\] \w"
#PS="\[\033[01;34m\][\t]\[\e[0m\] \[\033[00;33m\][\u@\h]\[\e[0m\] \w"

if [ -n "$WINDOW" ]; then
    PS+=" \[\033[01;34m\][${WINDOW}]\[\e[0m\]"
fi
PS+=" \[\033[00;32m\]> "
PS+="\[\e[0m\]"
export PS1=$PS

# if [ "$TERM" == "xterm-color" ]; then
#     export PS1="\[\033[01;34m\][\t]\[\e[0m\] \[\033[01;35m\][\u@\h]\[\e[0m\] \w \[\033[01;32m\]> \[\e[0m\]"
# fi

export EDITOR=vim
export DISPLAY=:0.0
#export PYTHONSTARTUP=~/.pythonrc.py

alias tmux='tmux -2' # fixes colors in vim

# cmsenv compatibility for ucsd uaf
if [[ $(hostname) == *uaf-* ]]; then 
    source /code/osgcode/cmssoft/cms/cmsset_default.sh
fi
if [[ $(hostname) == *squark* ]]; then 
    source ~/root/bin/thisroot.sh
fi

alias l='ls -l'
alias ll='ls -l'
alias lk='ls -lthr'
alias afswork='cd /afs/cern.ch/work/a/aschneid/'
#alias hadoop='cd /hadoop/cms/store/user/aschneid/ && ls -l'
alias grep='grep --color=auto'
alias ..='cd ..'
alias gridui='source /afs/cern.ch/cms/LCG/LCG-2/UI/cms_ui_env.sh'
alias ,,='echo "$PWD -> $OLDPWD" && cd $OLDPWD'
alias cd..='cd ..'
alias bc='bc -l'
alias root='root -b -l'
alias vrc='vim ~/.vimrc'

function gridtick {
grid-proxy-init -debug -verify
}
export -f gridtick

function vomstick {
voms-proxy-init -voms cms
}
export -f vomstick

function gridui {
source /afs/cern.ch/cms/LCG/LCG-2/UI/cms_ui_env.sh
}
export -f gridui

function crabscript {
source /afs/cern.ch/cms/ccs/wm/scripts/Crab/crab.sh
}
export -f crabscript

usingCrab=false
function crabenv {
gridui
cmsenv
crabscript
usingCrab=true
}
export -f crabenv

#ssh

function fnal {
kinit -A -f $USER@FNAL.GOV; ssh -2 $USER@cmslpc-sl5.fnal.gov
}
export -f fnal
alias lxplus5='ssh aschneid@lxplus5.cern.ch'
alias lxplus='ssh aschneid@lxplus.cern.ch'
alias brazos='ssh hogenshpogen@hurr.tamu.edu'
alias hurr='ssh hogenshpogen@hurr.tamu.edu'
alias io='ssh hogenshpogen@io.physics.tamu.edu'


alias tree='tree -C'
alias stats='~/syncfiles/pyfiles/stats.py'
alias histo='~/syncfiles/pyfiles/histo.py'

export HISTFILESIZE=500000
export HISTSIZE=100000
export PYTHONPATH="${PYTHONPATH}:$HOME/syncfiles/pyfiles"

# if [ "$(uname -o 2>/dev/null)" = "Cygwin" ]; then
alias desktop='cd /cygdrive/c/Users/Austin/Desktop'
function say() { mplayer -really-quiet "http://translate.google.com/translate_tts?tl=en&q=$*"; }
#fi

function xterms {
export DISPLAY=:0.0
xrdb -merge ~/.Xresources
}

function ccreate {
if $usingCrab; then
    crab -create -cfg $1
else
    echo "Do crabenv first!"
fi
}

function cands {

if $usingCrab; then 

    cfg=$1
    foldername=`cat ${cfg} | grep ui_working_dir | cut -d "=" -f 2 | tr -d " "`

    crab -create -cfg ${cfg}
    crab -submit -c ${foldername}
else
    echo "Do crabenv first!"
fi


}


function csub {

if $usingCrab; then 

    foldername=$1
    if [[ $1 =~ .*cfg ]]
    then
        foldername=`cat $1 | grep ui_working_dir | cut -d "=" -f 2 | tr -d " "`
    fi

    crab -submit -c ${foldername}
else
    echo "Do crabenv first!"
fi


}


function cstat {
if $usingCrab; then
    crab -status -c $1
else
    echo "Do crabenv first!"
fi
}

function cget {
if $usingCrab; then
    crab -getoutput -c $1
else
    echo "Do crabenv first!"
fi
}


function screens {
COUNTER=0
for i in `screen -ls | egrep -n ".*Detached.*" | awk '{print $2}' | cut -f1 -d '.'`; do
    (( COUNTER++ ))
    echo $COUNTER "=>" $i
    #echo $1

    if [ $# -gt 0 ]; then
        #echo $#
        if [ "$1" -eq "$COUNTER" ]; then
            #echo this screen
            screen -r $i
        fi

    fi

done
}

function pdftopng {
convert -verbose -density 250 -trim $1 -quality 100 -sharpen 0x1.0 ${1%%.pdf}.png
}

function alarm {
if [ $# -lt 2 ]; then
    echo "usage: alarm <seconds> <msg>"
    return 1
fi
local wait=$1
shift
(sleep $wait 2>/dev/null && echo -e "\n!!\n$*\n!!\n" && echo -e "\a" &)

}

function col {
if [ $# -lt 1 ]; then
    echo "usage: col <col #>"
    return 1
fi
awk -v x=$1 '{print $x}'

}

function extract {
if [ -f $1 ] ; then
    case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
    *.tar.gz)    tar xvzf $1    ;;
*.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
       *.gz)        gunzip $1      ;;
   *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
       *.tgz)       tar xvzf $1    ;;
   *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
       *.7z)        7z x $1        ;;
   *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
}

#function web {
#if [ $# -gt 0 ]; then
#    chmod -R a+r $@
#    scp -rp $@ namin@web.physics.ucsb.edu:~/public_html/dump/
#    for file in "$@"; do
#        echo "http://web.physics.ucsb.edu/~namin/dump/$file"
#    done
#else
#    echo "Usage: web [input files]"
#fi
#}
